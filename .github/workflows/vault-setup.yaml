name: Vault Setup and Secret Management

on:
  workflow_run:
    workflows: ["Terraform AKS Deployment"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

jobs:
  setup-vault:
    name: 'Setup Vault and Configure Secrets'
    runs-on: ubuntu-latest
    if: <span class="math-inline">\{\{ github\.event\.workflow\_run\.conclusion \=\= 'success' \|\| github\.event\_name \=\= 'workflow\_dispatch' \}\}
environment\: production
steps\:
\- name\: Checkout Repository
uses\: actions/checkout@v3
\- name\: Azure Login
uses\: azure/login@v1
with\:
creds\: '\{"clientId"\:"</span>{{ secrets.AZURE_CLIENT_ID }}","clientSecret":"<span class="math-inline">\{\{ secrets\.AZURE\_CLIENT\_SECRET \}\}","subscriptionId"\:"</span>{{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Get AKS Credentials
      run: |
        # התחברות ל-AKS
        az aks get-credentials --resource-group orel-neto-project --name gifapp-aks --admin
        
        # בדיקת חיבור
        kubectl get nodes

    - name: Install and Configure Vault
      run: |
        # בדיקה שהוולט רץ
        if ! kubectl get pods -n vault | grep vault-0 | grep -q Running; then
          echo "Vault is not running, installing it now..."
          kubectl create namespace vault --dry-run=client -o yaml | kubectl apply -f -
          
          # התקנת Vault
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm repo update
          helm install vault hashicorp/vault \
            --namespace vault \
            --set "server.dev.enabled=true" \
            --set "ui.enabled=true" \
            --set "ui.serviceType=LoadBalancer"
          
          # המתנה שהוולט יהיה מוכן
          echo "Waiting for Vault to be ready..."
          kubectl wait --for=condition=ready pod vault-0 -n vault --timeout=180s || true
          
          # התקנת CSI Driver
          helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
          helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver \
            --namespace kube-system \
            --set syncSecret.enabled=true
          
          # התקנת Vault CSI Provider
          kubectl apply -f https://raw.githubusercontent.com/hashicorp/vault-csi-provider/main/deployment/vault-csi-provider.yaml
          
          # המתנה שהוולט יהיה מוכן
          echo "Waiting for Vault to be initialized..."
          sleep 30
        else
          echo "Vault is already running."
        fi
        
        export VAULT_POD="vault-0"
        
        # הגדרת מנוע הסודות
        kubectl exec -n vault $VAULT_POD -- vault secrets enable -path=gifapp kv-v2 || true
        
        # העלאת הסודות לוולט
        echo "Updating secrets in Vault..."
        kubectl exec -n vault <span class="math-inline">VAULT\_POD \-\- vault kv put gifapp/database \\
DB\_USER\="</span>{{ secrets.DB_USER }}" \
          DB_PASSWORD="<span class="math-inline">\{\{ secrets\.DB\_PASSWORD \}\}" \\
DB\_NAME\="</span>{{ secrets.DB_NAME }}" \
          DB_PORT="${{ secrets.DB_PORT || '3306' }}"
        
        # הגדרת אימות Kubernetes
        kubectl exec -n vault <span class="math-inline">VAULT\_POD \-\- vault auth enable kubernetes \|\| true
\# יצירת ServiceAccount עם הרשאות מתאימות
echo "Creating service account with proper permissions\.\.\."
\# יצירת ServiceAccount vault\-auth
kubectl create serviceaccount vault\-auth \-n vault \-\-dry\-run\=client \-o yaml \| kubectl apply \-f \-
\# יצירת ClusterRoleBinding לשירות האקאונט
cat << EOF \| kubectl apply \-f \-
apiVersion\: rbac\.authorization\.k8s\.io/v1
kind\: ClusterRoleBinding
metadata\:
name\: vault\-auth\-binding
subjects\:
\- kind\: ServiceAccount
name\: vault\-auth
namespace\: vault
roleRef\:
kind\: ClusterRole
name\: system\:auth\-delegator
apiGroup\: rbac\.authorization\.k8s\.io
EOF
\# המתנה קצרה כדי לוודא שכל המשאבים נוצרו
echo "Waiting for service account to be fully created\.\.\."
sleep 10
\# אימות שהשירות אקאונט קיים
kubectl get serviceaccount vault\-auth \-n vault
\# יצירת Token
echo "Creating token for Kubernetes authentication\.\.\."
TOKEN\_REVIEW\_JWT\=</span>(kubectl create token vault-auth -n vault)
        
        # בדיקה שהטוקן נוצר בהצלחה
        if [ -z "<span class="math-inline">TOKEN\_REVIEW\_JWT" \]; then
echo "Failed to create token, trying alternative approach\.\.\."
\# ניסיון לשימוש בטוקן של פוד ה\-Vault עצמו
TOKEN\_REVIEW\_JWT\=</span>(kubectl exec -n vault $VAULT_POD -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
        else
          echo "Token created successfully."
        fi
        
        KUBE_HOST="https://kubernetes.default.svc.cluster.local"
        
        echo "Configuring Kubernetes authentication in Vault..."
        kubectl exec -n vault $VAULT_POD -- vault write auth/kubernetes/config \
          token_reviewer_jwt="$TOKEN_REVIEW_JWT" \
          kubernetes_host="$KUBE_HOST" || true
        
        # הגדרת מדיניות
        echo "Creating policy for database secrets..."
        kubectl exec -n vault $VAULT_POD -- /bin/sh -c 'cat > /tmp/gifapp-policy.hcl << EOF
        path "gifapp/data/database" {
          capabilities = ["read"]
        }
        EOF'
        
        kubectl exec -n vault $VAULT_POD -- vault policy write gifapp-policy /tmp/gifapp-policy.hcl
        
        # יצירת ServiceAccount לאפליקציה
        echo "Creating service account for application..."
        kubectl create namespace gifapp --dry-run=client -o yaml | kubectl apply -f -
        kubectl create serviceaccount flask-app-sa -n gifapp --dry-run=client -o yaml | kubectl apply -f -
        
        # הגדרת תפקיד
        echo "Creating role for application authentication..."
        kubectl exec -n vault $VAULT_POD -- vault write auth/kubernetes/role/flask-app \
          bound_service_account_names=flask-app-sa \
          bound_service_account_namespaces=gifapp \
          policies=gifapp-policy \
          ttl=1h

    - name: Configure SecretProviderClass
      run: |
        # בדיקה של SecretProviderClass
        if ! kubectl get secretproviderclass gifapp-vault-database -n gifapp &>/dev/null; then
          echo "Creating SecretProviderClass..."
          cat > secretproviderclass.yaml << EOF
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: gifapp-vault-database
  namespace: gifapp
spec:
  provider: vault
  parameters:
    vaultAddress: "http://vault.vault.svc.cluster.local:820